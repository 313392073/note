vue支持双向绑定的  默认认为是单项绑定的 数据从父传递给子
vue的双向绑定基于es5中的getter/setter来实现的
vue需要提供一个el对象进行实例化  所有的作用范围也是在el对象之下的
vue中指令和组件分的相当清楚 
指令只封装dom 而组件代表一个自给自足的独立的单元 有自己的视图和数据逻辑

组件：可以扩展html 封装可重用的代码 

组件化：核心意义是提取真正有复用价值的东西
1:通过shadow dom封装组件的内部结构
2：通过custom element对外提供组件的标签
3：通过template element定义组件的htmL模板
4：通过html import 控制器组件的依赖加载


在UI这一层通常指‘标签化’也就是把大块的业务界面  拆分成若干小块
然后进行组装 狭义的组件化一般是指标签化 也就是以自定义标签（自定义标签）为核心的机制
广义的组件化  对数据逻辑层业务梳理  形成不同层级的能力封装


组件的通讯
父传子：props down 向下传递数据给子组件
子传父：events up 给父组件发消息使用$.on(eventname)监听事件  使用$.emit(eventnamr) 触发事件
非父子 ：空的vue实例作为中央事件总线

复杂的非父子组件传值：集中式状态管理 vuex
vue的核心库只关注视图层 单文件组件 其模板 逻辑和样式都是内部耦合的 侧重数据和视图的同步


集中式状态管理模式:
每个组件维护自身的数据和状态 自给自足 分而治之
1:定义组件自身的初始数据
2:在组建内部获取异步数据
3:根据数据渲染更新视图

<template>
	<h2>single file component</h2>
</template>
<script>
	export default {
		//初始数据
		data(){
			
		},
		//获取异步数据
		created(){
			this.fetchData()
		},
		methods:{
			fetchDate:function(){
				//do something
			}
		}
	}
</script>
<style>
	...
</style>
单文件组件：
分治带来的可管理性
1：把组件设想成为一个单一的东西 一个组件包含了自身需要的数据和视图
2：把查询逻辑封装在内部   外部只需要实现一个响应事件获取事件的东西
组件化的优点：
组件化后整个应用树结构可以一目了然 可以随意添加或移除一个组件 而不会影响其他组件
这种方式封装的组件的内部实现聚合了异步请求的数据和自身的状态

vuex的状态管理存储是响应式的  ：
 就是当你的组件使用到了vuex的某个状态  一旦他发生了改变  所有关联的组件都会自动更新相对应的数据
 所以不能直接修改vuex的状态 ：修改vuex的状态唯一途径是提交（commit）mutation来实现修改
 
vue component:vue组件  html页面上  负责接收用户操作等交互行为 执行dispatch方法触发对应action进行回应

dispatch:操作行为触发方法 是唯一能执行action的方法

actions:操作行为处理模块 负责处理vue component接收到的所有交互行为  
		包含同步/异步操作 支持多个同名方法  按照注册的顺序依次触发 想 后台api请求的操作就在这个模块中进行
	  	包括触发其他action以及提交mutation的操作 该模块提供了promise的封装 以支持action的练市触发

commit:状态改变提交操作方法 对mutation进行提交 是唯一能执行mutation的方法

mutation:状态改变操作方法  是vue修改state的唯一推荐方法 其他修改方式在严格模式下将会报错
		该方法只能进行同步操作  且方法名只能全局唯一  操作之中会有一些hook暴露出来 以进行state的监控
		
state:页面状态管理容器对象 集中存储vue component中的data对象的零散数据 
		全局唯一  以进行统一的状态管理  页面显示所需要的数据从该对象中进行读取
		利用Vue的细粒度数据响应机制来进行高效的状态更新

getters: state对象读取方法  包含在render中  vue component通过该方法读取全局state对象

总结：
vue组件接收交互行为  调用dispatch方法触发action相关处理  若页面状态需要改变
则调用commit方法提交mutation修改state  通过getters获取到state新值
重新渲染vue components 界面随之更新

集中式存储管理应用的所有状态：
1：对于用户输入的状态  比如控制模态框的显示隐藏  我们一般在组件内部处理消化  
对于需要跨组件通信的  则可以存储在全局store中  我们可以将这一类状态称之为本地状态（local state)

2:对于服务端传过来的数据状态  按照大多数的实践是存储在全局的store中 这样可以在任意的组件中都可以使用
当然  也可以只将多组件的共享数据存储在全局的store中  单个组件需要的数据内部处理消化 组件销毁时对应的数据装药也会销毁


const store = new Vuex.Store({
	state:{
		var1:xxx,
		var2:xxx,
		var3:xxx
	},
	mutations:{
		<!--同步执行 不支持异步 所有数据变化只能通过mutations中的方法修改-->
		setState1(state,argument) {
			state.var1 = argument.value;
		},
		setState2(state,value) {
			state.var2 = value;
		},
		setState3(state,value) {
			state.var3 = value;
		}
	},
	actions: {
		<!--支持异步执行-->
		doAction1(context) { //context参数并不是store对象本身
			context.commit('setState1',{value:false});
		},
		doAction2(context) {
			context.commit('setState2','xxx');
			context.commit('setState3',{value:true});
		}
	},
	getters: {
		getVar1:state => {
			return state.var1;
		},
		getVar2:state => {
			return state.var2;
		},
		getVar3: state => {
			return state.var3;
		}
	},
	modules: {
		component1:component1Module,
		component2:component2Module,
		component3:component3Module
	}
});
如果store实例是全局变量，直接用store变量就可以：

触发一次状态更改：store.commit('setComponent1Var1', argument);
触发一次事务执行：store.dispatch('doComponent1Action1', argument);
获取状态： store.getters.getComponent1Var1;

作者：honli
链接：http://www.jianshu.com/p/5c010bb26399
來源：简书

ref(用来获取dom和子组件)
1:可以用来操作dom　(<p ref="p">hello</p>)
2:可以用来组件中的通讯
3：在组件中使用的this.refs是一个对象 包含了所有的绑定了的dom和子组件
